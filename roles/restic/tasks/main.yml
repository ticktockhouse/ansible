- include_vars: b2.yml
  when: restic_backend == 'backblaze'

- include_vars: s3.yml
  when: restic_backend == 's3'

- name: Download restic archive
  get_url:
    url: "{{ restic_archive_url }}"
    dest: "./restic_{{ restic_version }}_linux_amd64.bz2"
    checksum: "sha256:{{ restic_checksum }}"

- name: Unarchive it
  #unarchive:
    #src: "/root/restic_{{ restic_version }}_linux_amd64.bz2"
    #dest: "/root/"
    #remote_src: yes
  shell: bunzip2 ./restic_{{ restic_version }}_linux_amd64.bz2
  args:
    creates: ./restic_{{ restic_version }}_linux_amd64

- name: Copy the file to bindir
  copy:
    src:  "./restic_{{ restic_version }}_linux_amd64"
    dest: "{{ restic_bindir }}/restic"
    owner: root
    group: root
    mode: 0755
    remote_src: yes
  become: yes

- name: Check for existence of defined repo
  #command: "{{ restic_bindir }}/restic list index -r {{ restic_repo }}"
  #register: repo_check
  #environment: "{{ restic_env }}"
  #ignore_errors: yes
  stat:
    path: /root/.restic.cf
  register: repo_check

- set_fact:
    restic_password: "{{ lookup('password', '/dev/null length=32') }}"
  when: repo_check.stat.exists == false

- name: Create the repo if it doesn't exist
  shell: "{{ restic_bindir }}/restic -r {{ restic_repo }} init --password-command='echo {{ restic_password }}'"
  register: repo_init
  environment: "{{ restic_env }}"
  #ignore_errors: yes
  when: repo_check.stat.exists == false

#- name: Write an "initial backup" file
  #when: repo_init.rc == 0

- debug:
    var: repo_init 

#- name: Ensure the repo exists with the generated password
  #shell: restic -r "{{ restic_repo }}" init 

- name: Template the restic env var config file
  template:
    src: restic-env.j2
    dest: "{{ restic_env_file }}"
    #owner: root
    #group: root
    mode: 0400
  when: repo_check.stat.exists == false

- name: Create restic cache dir
  file:
    state: directory
    recurse: yes
    path: "{{ restic_cache_dir }}"
    owner: root
    group: root
    mode: 0644

- name: Create simple backup script with chosen directories, if they're defined..
  template:
    src: restic-backup.sh.j2
    dest: "{{ restic_bindir }}/restic-backup.sh"
    owner: root
    group: root
    mode: 0755
  when: 
    - restic_backup_dirs is defined and restic_backup_dirs
    - restic_mail_wrapper is not defined

- debug:
    var: restic_backup_dirs

- debug:
    var: restic_mail_wrapper

- name: Create simple backup script with email capability with chosen directories, if they're defined..
  template:
    src: restic-backup-mail.sh.j2
    dest: "{{ restic_bindir }}/restic-backup.sh"
    owner: root
    group: root
    mode: 0755
  when: 
    - restic_backup_dirs is defined and restic_backup_dirs
    - restic_mail_wrapper is defined and restic_mail_wrapper

- name: Create simple backup script with email capability with chosen directories, if they're defined..
  template:
    src: restic-backup.sh.j2
    dest: "{{ restic_bindir }}/restic-backup.sh"
    owner: root
    group: root
    mode: 0755
  when: 
    - restic_backup_dirs is defined and restic_backup_dirs

- name: Create restic-excludes file
  template:
    src: restic-excludes.txt.j2
    dest: "{{ restic_excludes_file }}"
    mode: 0755
    

#TODO:
##- name: See if we have a password in credstash
## Create cron script with relevant backup config(s)

- include: cron.yml
  when: restic_cron is defined and restic_cron
